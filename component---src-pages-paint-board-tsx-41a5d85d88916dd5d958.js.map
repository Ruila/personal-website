{"version":3,"file":"component---src-pages-paint-board-tsx-41a5d85d88916dd5d958.js","mappings":"gLAEO,SAASA,EAAUC,GAAmB,MAG3C,GAFAC,QAAQC,KAAK,QAASF,GACtBC,QAAQC,KAAK,YAAcF,EAAEG,YAA2BC,QAAS,KAAOJ,EAAqBK,QAAS,KAAQL,EAAuBM,OAAmBC,yBACnJP,EAAEG,YAA2BC,QAChC,MAAO,CAAEI,EAAIR,EAAEG,YAA2BC,QAASK,EAAIT,EAAEG,YAA2BO,SAEtF,IAAMC,GAAQ,UAACX,EAAqBK,eAAtB,eAAgC,KAAM,GAC9CO,EAAQZ,EAAuBM,OAAmBC,wBACxD,MAAO,CACLC,EAAIG,EAAgBE,QAAUD,EAAIJ,EAClCC,EAAIE,EAAgBG,QAAUF,EAAIH,GCT/B,IAAMM,EAAsC,WACjD,OAA8BC,EAAAA,EAAAA,WAAS,GAAhCC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,GAAlCG,EAAP,KAAiBC,EAAjB,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,GAAlCK,EAAP,KAAiBC,EAAjB,KACMC,GAASC,EAAAA,EAAAA,QAAO,MAWhBC,EAAe,SAAAzB,GACnB,MAAiBD,EAAUC,GAAnBQ,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EACXS,GAAW,GACXE,EAAYZ,GACZc,EAAYb,IAGRiB,EAAa,SAAA1B,GACjB,IAAM2B,EAAWJ,EAAOK,QAAyCC,WAC/D,MAEF,GAAKZ,EAAL,CACA,MAAiBlB,EAAUC,GAAnBQ,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EACXkB,EAAQG,YACRH,EAAQI,OAAOZ,EAAUE,GACzBM,EAAQK,OAAOxB,EAAGC,GAClBkB,EAAQM,SACRb,EAAYZ,GACZc,EAAYb,KAGRyB,EAAc,WAClBhB,GAAW,IAOb,OAJAiB,EAAAA,EAAAA,YAAU,WAnCQ,IACVR,GAAAA,EAAWJ,EAAOK,QAAyCC,WAC/D,OAEMO,YAAR,OACAT,EAAQU,UAAY,EACpBV,EAAQW,SAAW,QACnBX,EAAQY,QAAU,UA8BjB,IAGD,0BACEC,IAAKjB,EACLkB,MAAO,IACPC,OAAQ,IACRC,UAAU,0CACVC,aAAcnB,EACdoB,YAAanB,EACboB,WAAYZ,EACZa,cAAeb,EACfc,YAAavB,EACbwB,YAAavB,EACbwB,WAAYhB,EACZiB,UAAWjB,KCzDJkB,EAAqC,WAChD,OACE,uBAAKT,UAAU,2DACb,uBAAKA,UAAU,0BACb,uBAAKA,UAAU,yBAAyBU,IAAI,oBAC5C,uBAAKV,UAAU,eAAf,yBAEF,gBAAC5B,EAAD,QCHN,EAJgD,WAC5C,OAAO,gBAACqC,EAAD","sources":["webpack://my-gatsby-site/./src/core/plugins/getElementOffset.ts","webpack://my-gatsby-site/./src/components/paint/PaintBoard.tsx","webpack://my-gatsby-site/./src/components/paint/PaintView.tsx","webpack://my-gatsby-site/./src/pages/paint-board.tsx"],"sourcesContent":["import { SyntheticEvent } from \"react\"\n\nexport function getOffset(e: SyntheticEvent) {\n  console.info(\"event\", e)\n  console.info(\"getOffset\", (e.nativeEvent as MouseEvent).offsetX, \"xx\", (e as TouchEventInit).touches, \"yy\", ((e as unknown as Event).target as Element).getBoundingClientRect())\n  if ((e.nativeEvent as MouseEvent).offsetX) {\n    return { x: (e.nativeEvent as MouseEvent).offsetX, y: (e.nativeEvent as MouseEvent).offsetY };\n  }\n  const touch = (e as TouchEventInit).touches?.[0] || {};\n  const bcr = ((e as unknown as Event).target as Element).getBoundingClientRect();\n  return {\n    x: (touch as Touch).clientX - bcr.x,\n    y: (touch as Touch).clientY - bcr.y\n  };\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport { getOffset } from \"../../core/plugins/getElementOffset\"\n\nexport const PaintBoard: React.FunctionComponent = () => {\n  const [drawing, setDrawing] = useState(false)\n  const [currentX, setCurrentX] = useState(0)\n  const [currentY, setCurrentY] = useState(0)\n  const canvas = useRef(null)\n  const initBoard = () => {\n    const context = (canvas.current as unknown as HTMLCanvasElement).getContext(\n      \"2d\"\n    ) as CanvasRenderingContext2D\n    context.strokeStyle = `#000`\n    context.lineWidth = 3\n    context.lineJoin = \"round\"\n    context.lineCap = \"round\"\n  }\n\n  const startDrawing = e => {\n    const { x, y } = getOffset(e)\n    setDrawing(true)\n    setCurrentX(x)\n    setCurrentY(y)\n  }\n\n  const drawCanvas = e => {\n    const context = (canvas.current as unknown as HTMLCanvasElement).getContext(\n      \"2d\"\n    ) as CanvasRenderingContext2D\n    if (!drawing) return\n    const { x, y } = getOffset(e)\n    context.beginPath()\n    context.moveTo(currentX, currentY)\n    context.lineTo(x, y)\n    context.stroke()\n    setCurrentX(x)\n    setCurrentY(y)\n  }\n\n  const stopDrawing = () => {\n    setDrawing(false)\n  }\n\n  useEffect(() => {\n    initBoard()\n  }, [])\n\n  return (\n    <canvas\n      ref={canvas}\n      width={400}\n      height={400}\n      className=\"border-[#000] border-[1px] border-solid\"\n      onTouchStart={startDrawing}\n      onTouchMove={drawCanvas}\n      onTouchEnd={stopDrawing}\n      onTouchCancel={stopDrawing}\n      onMouseDown={startDrawing}\n      onMouseMove={drawCanvas}\n      onMouseOut={stopDrawing}\n      onMouseUp={stopDrawing}\n    />\n  )\n}\n","import React from \"react\"\nimport { PaintBoard } from \"./PaintBoard\"\n\nexport const PaintView: React.FunctionComponent = () => {\n  return (\n    <div className=\"min-h-[600px] flex flex-col items-center justify-center\">\n      <div className=\"flex items-center mb-4\">\n        <img className=\"w-[50px] h-[45px] mr-4\" src=\"/react-icon.png\" />\n        <div className=\"text-[24px]\">React Painting Board</div>\n      </div>\n      <PaintBoard />\n    </div>\n  )\n}\n","import React from \"react\"\nimport { PaintView } from \"../components/paint/PaintView\";\n\nconst PaintBoardPage: React.FunctionComponent = () => {\n    return <PaintView/>\n}\n\nexport default PaintBoardPage\n"],"names":["getOffset","e","console","info","nativeEvent","offsetX","touches","target","getBoundingClientRect","x","y","offsetY","touch","bcr","clientX","clientY","PaintBoard","useState","drawing","setDrawing","currentX","setCurrentX","currentY","setCurrentY","canvas","useRef","startDrawing","drawCanvas","context","current","getContext","beginPath","moveTo","lineTo","stroke","stopDrawing","useEffect","strokeStyle","lineWidth","lineJoin","lineCap","ref","width","height","className","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","onMouseDown","onMouseMove","onMouseOut","onMouseUp","PaintView","src"],"sourceRoot":""}